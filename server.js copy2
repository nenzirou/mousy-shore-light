const http = require('http');
const querystring = require('querystring');
const discord = require('discord.js');
const client = new discord.Client();
const cron = require('node-cron');// 定時お知らせに使う
let name = [["伊藤","三木"],["浅野","白木"],["松野","虫鹿"],["尾山","稲守"],["南部","高岡"],["犬飼","野ツ俣"]];
let id = [["715796433487396864","625491071475908651"],["243312886049406979","695626581187756102"],["694899614201020448","336031337452666880"],["699500872442314754","694443025287610408"],["708191971424075797","337439445269741568"],["331787151341780994","694560220730359890"]];
let res = ["おぉ″ーん″！呼んだかにゃぁ″？","お″ねぇ″さ″ん″に呼ばれた気がしたにゃぁ！！","人気者は困っちゃうにゃぁ″～！","ミ″ーを呼ぶ声が聞こえてきた気がするにゃぁ″！","何か用かにゃぁ″？","お″ぉ～ん！ニャンちゅうでぇ～す″！！",
          "これからお″ねぇ″さんとデェートがあるかるぁ″、行ってくるにゃぁ″！","は？","いぇ″～い！ニャンちゅうは今日も元気いっぱいにゃぁ″～！","な″～んということでしょう！ニャンちゅうは人気者でぇ″～す！","んにゃ″ぁ″ぁ″ぁ″ぁ″ぁ″ぁ",
          "み゛ぃとともだちになってくれるのかにゃあん！？","お゛に゛ぃさぁ゛ん！","み゛ぃはま゛ぁだいぎでる゛に゛ゃあ゛あ゛あ゛あ゛ん゛！","ｶﾞｶﾞｶﾞ……ｼﾃ、ﾋﾟｰｶﾞｶﾞ…ｺｺｶﾗ…ﾀﾞｼ…ｶﾞｶﾞｶﾞｶﾞｶﾞｶﾞ"];
let week = ["日","月","火","水","木","金","土"];
let zemiWeek = [1,2,4];// 曜日を数値で表す0~6
let zemiName = 0;// 発表者の配列番号
let addName = [""];
const fs = require("fs");
// データをロードする
fs.readFile("tex.txt", "utf-8", (err, data) => {
  if (err) throw err;
  let str = data.split("\n");
  zemiName = Number(str[0]);
  let str2 = str[1].split(",");
  for(var i=0;i<str2.length;i++){
    addName.push(str2[i]);
  }
});

http.createServer(function(req, res){
  if (req.method == 'POST'){
    var data = "";
    req.on('data', function(chunk){
      data += chunk;
    });
    req.on('end', function(){
      if(!data){
        res.end("No post data");
        return;
      }
      var dataObject = querystring.parse(data);
      console.log("post:" + dataObject.type);
      if(dataObject.type == "wake"){
        console.log("Woke up in post");
        res.end();
        return;
      }
      res.end();
    });
  }
  else if (req.method == 'GET'){
    res.writeHead(200, {'Content-Type': 'text/plain'});
    res.end('Discord Bot is active now\n');
  }
}).listen(3000);

client.on('ready', message =>{
  console.log('Bot準備完了～');
  client.user.setPresence({ game: { name: 'お″ねぇ″さぁん″' } });// プレイ中のゲーム名を変更できる
});

// 定時お知らせ　"秒　分　時間　日　月　曜日"を表す　*で毎回行う 0 22 * * * で毎朝7時に実行
cron.schedule('30 30 22 * * *', () => {
  const now=new Date();// 日付取得に使う
  var tmp;
  let todayWeek = now.getDay();
  let nowHour = now.getHours()+9;// グリニッジ標準時間になるので9時間分時差補正
  // 時差分の曜日補正
  if(nowHour >= 24) {
    todayWeek = (todayWeek+1)%7;
    nowHour -= 24;
  }
  // その日の13時以降と13時より前で次回予告を変える
  for(var i=0;i<week.length;i++){
    tmp = zemiWeek[0];
    if(nowHour < 13){
      if(zemiWeek[i]>=todayWeek) {
        tmp = zemiWeek[i];
        break;
      }
    } else {
      if(zemiWeek[i]>todayWeek) {
        tmp = zemiWeek[i];
        break;
      }
    }
  }
  let text = "おはようございます！現在"+week[todayWeek]+"曜日の"+nowHour+"時"+now.getMinutes()+"分です！";
  if(tmp==todayWeek) text += returnMention(zemiName)+"\n本日13時00分からゼミの予定です。\n発表者は"+combiName(name[zemiName],addName)+"さんです。";
  else text += "\n次回のゼミは"+week[tmp]+"曜日の13時00分からの予定です。\n発表者は"+combiName(name[zemiName],addName)+"さんです。\n発表の準備をしておきましょう！";
  if(todayWeek != 6) sendMsg("716879387072528384",text);// "チャンネルid",text お知らせ:716879387072528384 bot開発:758946751830163477 土曜日除外
});

// ゼミ終了後のゼミ順定時連絡
cron.schedule('30 6 * * 1,2,4', () => {
  let text = returnOrder();
  sendMsg("716879387072528384",text);
});

// ユーザのコメントに対する反応系
client.on('message', message =>{
  // 自分のコメントに反応して無限ループしないようにする
  if (message.author.id == client.user.id || message.author.bot){
    return;
  }
  /*
  // メンションされたときの反応
  if(message.isMemberMentioned(client.user)){
    sendReply(message, "おぉ″ーん、どうかしたのかにゃ″ーん″？");
    return;
  }
  */
  // 各種反応
  if(message.content.match(/にゃんちゅう|ニャンチュウ|ニャンちゅう|にゃんチュウ/)){
    sendReply(message,res[Math.round(Math.random()*(res.length-1))]);   
  }
  if(message.content.match(/ありが|あざ/)){
    let text = "ミ″ーからもお礼を言わせてもらうにゃ″ぁ！ありがとうございまぁ″～す！にゃ″ははは！！";
    sendMsg(message.channel.id,text);
  }
  if(message.content.match(/すみません|ごめん|すまん|申し訳/)){
    let text = "ミ″ーも一緒に謝るから許して欲しいにゃ！誠にごめんなさぁ″～い！にゃ″はははは！！";
    sendMsg(message.channel.id,text);
  }
  if(message.content.match(/うるさい|しずかに|やっぱり/)){
    let text = "ぃや″っぱりぃ″！？";
    sendMsg(message.channel.id,text);
  }
  // ゼミを始める際に入力することで、全員に対する通知を行い、発表者順を表示する　お知らせ:716879387072528384 bot開発:758946751830163477
  if (message.content.match(/@zemi/)){
    let tmp = (zemiName+2)%6;
    let text = "everyone\nゼミが始まります！\n**発表者："+combiName(name[zemiName],addName)+"**\n司会　："+returnName(name[tmp]);
    if(message.channel.id=="758946751830163477"){
      text = "everyone\nゼミが始まります！\n**発表者："+combiName(name[zemiName],addName)+"**\n司会　："+returnName(name[tmp]);
      sendMsg("758946751830163477",text);
    }else{
      text = "@everyone\nゼミが始まります！\n**発表者："+combiName(name[zemiName],addName)+"**\n司会　："+returnName(name[tmp]);
      sendMsg("716879387072528384",text);
    }
    clearAddName();
    opeZemi(1);
    save();
  }
  // ゼミ順を前に移動する
  if(message.content.match(/@back/)){
    opeZemi(-1);
    save();
    sendReply(message,"発表者順を１つ前に移動しました。\n次の発表者は"+combiName(name[zemiName],addName)+"さんです。");                         
  }
  // ゼミ順を後に移動する
  if(message.content.match(/@forward/)){
    opeZemi(1);
    save();
    sendReply(message,"発表者順を１つ後に移動しました。\n次の発表者は"+combiName(name[zemiName],addName)+"さんです。");    
  }
  // ゼミ順を初期化する
  if(message.content.match(/@clear/)){
    zemiName = 0;
    clearAddName();
    save();
    sendReply(message,"ゼミ順を初期化しました。");    
  }
  // 発表順の確認をする
  if(message.content.match(/@next/)){
    let text = returnOrder();
    sendMsg(message.channel.id, text);
  }
  // ゼミ順に積み残しの人を追加する
  if(message.content.match(/@add/)){
    var str = message.content.split(" ");
    var text = "以下の人を次のゼミ発表者に追加しました：";
    if(str.length>1){
      var judgeLength = 0;
      for(var i=1;i<str.length;i++){
        if(str[i].length <= 5) {
          text += addAddName(str[i]);
          if(i!=str.length-1 && str[i]!=="") text+="、";
        }
        if(str[i].length > judgeLength) judgeLength = str[i].length;
      }
      if(judgeLength>5) text += "\n名前が長すぎる人はミ″ーには覚えられなかったにゃ″ぁ";
    }else{
      text = "@add 名前 名前 ... のように半角スペースで区切って教えてくれないとミ″ーには難しいにゃ″ぁ";
    }
    save();
    sendMsg(message.channel.id, text);
  }
  // ゼミ順の積み残しの人を削除する
  if(message.content.match(/@take/)){
    clearAddName();
    var text = "積み残しの人のリストを削除しました。";
    save();
    sendMsg(message.channel.id, text);
  }
  // 文字数を計測する
  if(message.content.match(/@len/)){
    var str = message.content.split(" ");
    var sum = str.length-2;
    var space = 0;
    var line = 0;
    for(var i=1;i<str.length;i++){
      sum += str[i].length;
      space += ( str[i].match( /　/g ) || [] ).length
      line += ( str[i].match( /\n/g ) || [] ).length
    }
    let text = "文字数(全角スペース込み)："+(sum-line)+"文字\n文字数(全角スペース抜き)："+(sum-line-space-str.length+2)+"文字\n行数："+(line+1)+"行";
    sendMsg(message.channel.id,text);
  }
  // サイコロを振る
  if(message.content.match(/@dice/)){
    var str = message.content.split(" ");
    var text = "";
    if(str.length==3){
      var m = str[1];
      var n = str[2];
      if(n <= 300) text = "出目：";
      var sum = 0;
      for(var i=0;i<n;i++){
        var tmp = Math.floor(Math.random()*m)+1;
        if(n<= 300) text += tmp+" ";
        sum += tmp;
      }
      if(n != 1) {
        text = text + "\n合計："+sum;
        text = text + "\n平均："+(sum/n).toFixed(3);
      }
    }else{
      text = "ん″にゃ″はぁ″！m面のダイスをn回振るには「@dice m n」と半角スペースで区切って入力してくださぁ″～い。"
    }
    sendMsg(message.channel.id,text);
  }
  // タイマー機能
  if (message.content.match(/@time/)){
    var str = message.content.split(" ");
    if(Number(str[1])<=99){
      sendMsg(message.channel.id, "今からミ″ーが"+str[1]+"分数えてあげるにゃぁ″！よ～いドォ″ン″！");
      setTimeout(function() {
        sendReply(message,"にゃ″～んにゃ″にゃ″～ん！！"+str[1]+"分経ったにゃぁ″！！");   
      },Number(str[1])*1000*60);
    }else sendMsg(message.channel.id, "時間を測るには@time n(1~99の間)と入力してほしいにゃ″ん！");
  }
  // デバッグ用
  if(message.content.match(/@show/)){
    let text = "";
    for(var i=0;i<addName.length;i++){
      text+=i+"番:"+addName[i];
    }
    sendMsg(message.channel.id, text);
  }
});

// 以下　デフォルトであったなんかいりそうなやつと関数
if(process.env.DISCORD_BOT_TOKEN == undefined){
 console.log('DISCORD_BOT_TOKENが設定されていません。');
 process.exit(0);
}

client.login( process.env.DISCORD_BOT_TOKEN );
// リプを飛ばす
function sendReply(message, text){
  message.reply(text)
    .then(console.log("リプライ送信: " + text))
    .catch(console.error);
}
// 指定したチャンネルにメッセージを送る
function sendMsg(channelId, text, option={}){
  client.channels.get(channelId).send(text, option)
    .then(console.log("メッセージ送信: " + text + JSON.stringify(option)))
    .catch(console.error);
}

// 通常の発表者と積み残しの発表者名を結合して返す
function combiName(zemi,add){
  let text = returnName(zemi);
  for(var i=1;i<add.length;i++){
    text+="、";
    text+=add[i];
  }
  return text;
}

// 名前の配列を渡すと、テキストの形に連結してくれる
function returnName(name){
  let text = "";
  for(var i=0;i<name.length;i++){
    text+=name[i];
    if(i!=name.length-1) text+="、";
  }
  return text;
}

// 指定した発表者番号渡すと、メンションする文字列を返す
function returnMention(num){
  let text = "";
  for(var i=0;i<id[num].length;i++){
    text += "<@"+id[num][i]+">";
  }
  return text;
}

// ゼミ順を移動する
function opeZemi(num){
  zemiName += num;
  if(zemiName<0) zemiName = name.length-1;
  else if(zemiName>name.length-1) zemiName = 0;
}

// 一周期分のゼミ順を返す
function returnOrder(){
  let text = "発表者順\n**次回　：";
  text += combiName(name[zemiName],addName)+"**\n";
  for(var i=1;i<name.length;i++){
    text += "その次："+returnName(name[(zemiName+i)%6])+"\n";
  }
  return text;
}

// 積み残しリストに追加する
function addAddName(str){
  let text = "";
  if(str!==""){
    addName.push(str);
    text+=str+" ";
  }
  return text;
}

// 積み残しリストを初期化する
function clearAddName(){
  addName = [""];
}

// ファイルに書き込む
function save(){
  let text = zemiName+"\n";
  for(var i=1;i<addName.length;i++){
    if(addName[i]!==""){
      text+=addName[i];
      if(i!=addName.length-1) text+=",";
    }
  }
  fs.writeFile("tex.txt", text, (err) => {
    if (err) throw err;
  });
}
